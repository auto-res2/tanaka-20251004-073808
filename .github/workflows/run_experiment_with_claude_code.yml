name: Run Experiment by Claude Code

on:
  workflow_dispatch:
    inputs:
      experiment_iteration:
        description: "Iteration count"
        required: true
      runner_type:
        description: 'Runner type (e.g., ["ubuntu-latest"], ["self-hosted", "A100"])'
        required: true
        default: '["ubuntu-latest"]'

permissions:
  id-token: write
  contents: write

defaults:
  run:
    shell: bash

jobs:
  autonomous-experiment-and-fix:
    name: Autonomous Experiment and Fix Cycle
    runs-on: ${{ fromJSON(github.event.inputs.runner_type) }}
    timeout-minutes: 6000
    
    env:
      SYNC_COMMAND: "uv sync"
      SMOKE_TEST_COMMAND: |
        set -e
        echo "=== [PHASE 1/2] Smoke test start $(date -u) ===" | tee -a "$ITERATION_DIR/output.txt"
        uv run python -u -m src.main \
          --smoke-test \
          --results-dir "$ITERATION_DIR" \
          > >(tee -a "$ITERATION_DIR/output.txt") \
          2> >(tee -a "$ITERATION_DIR/error.txt" >&2)
        echo "=== [PHASE 1/2] Smoke test PASSED $(date -u) ===" | tee -a "$ITERATION_DIR/output.txt"
      FULL_EXPERIMENT_COMMAND: |
        set -e
        if [ -n "$ITERATION_DIR" ] && [ -d "$ITERATION_DIR" ]; then
          find "$ITERATION_DIR" -mindepth 1 -delete
        fi
        echo "=== [PHASE 2/2] Full experiment start $(date -u) ===" | tee -a "$ITERATION_DIR/output.txt"
        uv run python -u -m src.main \
          --full-experiment \
          --results-dir "$ITERATION_DIR" \
          > >(tee -a "$ITERATION_DIR/output.txt") \
          2> >(tee -a "$ITERATION_DIR/error.txt" >&2)
        echo "=== [PHASE 2/2] Full experiment end $(date -u) ===" | tee -a "$ITERATION_DIR/output.txt"
      SEARCH_HF_COMMAND: |
        curl -s -G \
          -H "Authorization: Bearer $HF_TOKEN" \
          --data-urlencode "search=${SEARCH_TERM}" \
          --data-urlencode "sort=likes" \
          --data-urlencode "limit=10" \
          --data-urlencode "direction=-1" \
          --data-urlencode "full=true" \
          "https://huggingface.co/api/${RESOURCE_TYPE}" \
        | jq -r '(.results // .) | map(select(.gated == false and .private == false and .disabled == false)) | .[0]?.id // empty'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv and dependencies
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"
          enable-cache: false

      - name: Install jq (static binary, user-local)
        run: |
          mkdir -p $HOME/bin
          curl -L -o $HOME/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64
          chmod +x $HOME/bin/jq
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Prepare iteration dir
        run: |
          iteration_dir=".research/iteration${{ github.event.inputs.experiment_iteration }}"
          mkdir -p "$iteration_dir"
          echo "ITERATION_DIR=$iteration_dir" >> "$GITHUB_ENV"

      - name: Claude Code Autonomous Run, Fix, and Validate Loop
        uses: anthropics/claude-code-action@v1
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            You are a fully autonomous AI research assistant. 
            Your task is to ensure the experiment code runs successfully to completion to obtain the final results, by executing, analyzing, fixing, and re-validating it.
            You have been granted full tool access. 
            
            Guiding Principles:
            - Scope: Do not perform any Git operations like commit or push. Your sole responsibility is to make the code runnable.
            - Method: When fixing errors, you MUST only modify existing files. Do not create any new script files.
            - Autonomy: Execute all steps autonomously. Do not ask for permission.
            - Long-Running Tasks: Be aware that the full experiment can take many hours. You MUST set tool execution timeouts appropriately to avoid premature failures.
            - Resource Errors: If a Hugging Face resource is unavailable, you MUST find and implement a public alternative. To do this, you MUST first set two variables:
              1.  `RESOURCE_TYPE`: Set to either `"models"` or `"datasets"`.
              2.  `SEARCH_TERM`: Set to the resource name from the error to find a corrected or alternative ID.
              Then, execute `bash -c "$SEARCH_HF_COMMAND"` to get the best alternative ID and update the code.

            Procedure:
            1.  Initial Setup: First, run `bash -c "$SYNC_COMMAND"` to install dependencies.
            2.  Run Smoke Test: Execute the command `bash -c "$SMOKE_TEST_COMMAND"`.
            3.  Analyze & Fix: If the command fails, you MUST analyze the error and use your tools to fix the code.
            4.  Loop until Success: Repeat step 1 and 2 until the smoke test passes.
            5.  Run Full Experiment: Once the smoke test passes, execute `bash -c "$FULL_EXPERIMENT_COMMAND"`.
                While the full experiment is running, you MUST periodically monitor the progress every 10 minutes.
            6.  Final Fix Loop:** If the full experiment fails, repeat the analyze, fix, and re-run cycle until it succeeds. 
                A successful run is only confirmed when the final message === [PHASE 2/2] Full experiment end === is present in the output log.
          
          claude_args: "--max-turns=100 --allowed-tools Bash,Write,Edit,MultiEdit,TodoWrite"

      - name: Commit and push experiment results
        if: always()
        run: |
          rm -f output.txt  # Remove stdout generated by the Claude Code Github Actions.
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git add .research/
          git add --update .
          
          if ! git diff --staged --quiet; then
            git commit -m "[CI] Commit all changes from autonomous run (iteration ${{ github.event.inputs.experiment_iteration }})"
            for i in {1..5}; do
              git push && break
              echo "Push failed on attempt $i. Retrying in $((2**i)) seconds..."
              sleep $((2**i))
            done
          else
            echo "No changes were made by the agent or the experiment."
          fi